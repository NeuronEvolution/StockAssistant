// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UserSettingsDeleteHandlerFunc turns a function with the right signature into a user settings delete handler
type UserSettingsDeleteHandlerFunc func(UserSettingsDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserSettingsDeleteHandlerFunc) Handle(params UserSettingsDeleteParams) middleware.Responder {
	return fn(params)
}

// UserSettingsDeleteHandler interface for that can handle valid user settings delete params
type UserSettingsDeleteHandler interface {
	Handle(UserSettingsDeleteParams) middleware.Responder
}

// NewUserSettingsDelete creates a new http.Handler for the user settings delete operation
func NewUserSettingsDelete(ctx *middleware.Context, handler UserSettingsDeleteHandler) *UserSettingsDelete {
	return &UserSettingsDelete{Context: ctx, Handler: handler}
}

/*UserSettingsDelete swagger:route DELETE /{userId}/settings/{configKey} userSettingsDelete

UserSettingsDelete user settings delete API

*/
type UserSettingsDelete struct {
	Context *middleware.Context
	Handler UserSettingsDeleteHandler
}

func (o *UserSettingsDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserSettingsDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
