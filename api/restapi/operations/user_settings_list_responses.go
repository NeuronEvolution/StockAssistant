// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/NeuronEvolution/StockAssistant/api/models"
)

// UserSettingsListOKCode is the HTTP code returned for type UserSettingsListOK
const UserSettingsListOKCode int = 200

/*UserSettingsListOK ok

swagger:response userSettingsListOK
*/
type UserSettingsListOK struct {

	/*
	  In: Body
	*/
	Payload models.UserSettingsListOKBody `json:"body,omitempty"`
}

// NewUserSettingsListOK creates UserSettingsListOK with default headers values
func NewUserSettingsListOK() *UserSettingsListOK {
	return &UserSettingsListOK{}
}

// WithPayload adds the payload to the user settings list o k response
func (o *UserSettingsListOK) WithPayload(payload models.UserSettingsListOKBody) *UserSettingsListOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user settings list o k response
func (o *UserSettingsListOK) SetPayload(payload models.UserSettingsListOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserSettingsListOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.UserSettingsListOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// UserSettingsListBadRequestCode is the HTTP code returned for type UserSettingsListBadRequest
const UserSettingsListBadRequestCode int = 400

/*UserSettingsListBadRequest Bad request

swagger:response userSettingsListBadRequest
*/
type UserSettingsListBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUserSettingsListBadRequest creates UserSettingsListBadRequest with default headers values
func NewUserSettingsListBadRequest() *UserSettingsListBadRequest {
	return &UserSettingsListBadRequest{}
}

// WithPayload adds the payload to the user settings list bad request response
func (o *UserSettingsListBadRequest) WithPayload(payload string) *UserSettingsListBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user settings list bad request response
func (o *UserSettingsListBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserSettingsListBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// UserSettingsListInternalServerErrorCode is the HTTP code returned for type UserSettingsListInternalServerError
const UserSettingsListInternalServerErrorCode int = 500

/*UserSettingsListInternalServerError Internal error

swagger:response userSettingsListInternalServerError
*/
type UserSettingsListInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUserSettingsListInternalServerError creates UserSettingsListInternalServerError with default headers values
func NewUserSettingsListInternalServerError() *UserSettingsListInternalServerError {
	return &UserSettingsListInternalServerError{}
}

// WithPayload adds the payload to the user settings list internal server error response
func (o *UserSettingsListInternalServerError) WithPayload(payload string) *UserSettingsListInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user settings list internal server error response
func (o *UserSettingsListInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserSettingsListInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
