// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/NeuronEvolution/StockAssistant/api/models"
)

// NewUserIndexUpdateParams creates a new UserIndexUpdateParams object
// with the default values initialized.
func NewUserIndexUpdateParams() UserIndexUpdateParams {
	var ()
	return UserIndexUpdateParams{}
}

// UserIndexUpdateParams contains all the bound params for the user index update operation
// typically these are obtained from a http.Request
//
// swagger:parameters UserIndexUpdate
type UserIndexUpdateParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*Index
	  Required: true
	  In: body
	*/
	Index *models.StockIndex
	/*index id
	  Required: true
	  In: path
	*/
	IndexID string
	/*User id
	  Required: true
	  In: path
	*/
	UserID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *UserIndexUpdateParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.StockIndex
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("index", "body"))
			} else {
				res = append(res, errors.NewParseError("index", "body", "", err))
			}

		} else {
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Index = &body
			}
		}

	} else {
		res = append(res, errors.Required("index", "body"))
	}

	rIndexID, rhkIndexID, _ := route.Params.GetOK("indexId")
	if err := o.bindIndexID(rIndexID, rhkIndexID, route.Formats); err != nil {
		res = append(res, err)
	}

	rUserID, rhkUserID, _ := route.Params.GetOK("userId")
	if err := o.bindUserID(rUserID, rhkUserID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserIndexUpdateParams) bindIndexID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.IndexID = raw

	return nil
}

func (o *UserIndexUpdateParams) bindUserID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.UserID = raw

	return nil
}
