// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/NeuronEvolution/StockAssistant/api/models"
)

// UserSettingsUpdateOKCode is the HTTP code returned for type UserSettingsUpdateOK
const UserSettingsUpdateOKCode int = 200

/*UserSettingsUpdateOK ok

swagger:response userSettingsUpdateOK
*/
type UserSettingsUpdateOK struct {

	/*
	  In: Body
	*/
	Payload *models.Setting `json:"body,omitempty"`
}

// NewUserSettingsUpdateOK creates UserSettingsUpdateOK with default headers values
func NewUserSettingsUpdateOK() *UserSettingsUpdateOK {
	return &UserSettingsUpdateOK{}
}

// WithPayload adds the payload to the user settings update o k response
func (o *UserSettingsUpdateOK) WithPayload(payload *models.Setting) *UserSettingsUpdateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user settings update o k response
func (o *UserSettingsUpdateOK) SetPayload(payload *models.Setting) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserSettingsUpdateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserSettingsUpdateBadRequestCode is the HTTP code returned for type UserSettingsUpdateBadRequest
const UserSettingsUpdateBadRequestCode int = 400

/*UserSettingsUpdateBadRequest Bad request

swagger:response userSettingsUpdateBadRequest
*/
type UserSettingsUpdateBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUserSettingsUpdateBadRequest creates UserSettingsUpdateBadRequest with default headers values
func NewUserSettingsUpdateBadRequest() *UserSettingsUpdateBadRequest {
	return &UserSettingsUpdateBadRequest{}
}

// WithPayload adds the payload to the user settings update bad request response
func (o *UserSettingsUpdateBadRequest) WithPayload(payload string) *UserSettingsUpdateBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user settings update bad request response
func (o *UserSettingsUpdateBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserSettingsUpdateBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// UserSettingsUpdateInternalServerErrorCode is the HTTP code returned for type UserSettingsUpdateInternalServerError
const UserSettingsUpdateInternalServerErrorCode int = 500

/*UserSettingsUpdateInternalServerError Internal error

swagger:response userSettingsUpdateInternalServerError
*/
type UserSettingsUpdateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUserSettingsUpdateInternalServerError creates UserSettingsUpdateInternalServerError with default headers values
func NewUserSettingsUpdateInternalServerError() *UserSettingsUpdateInternalServerError {
	return &UserSettingsUpdateInternalServerError{}
}

// WithPayload adds the payload to the user settings update internal server error response
func (o *UserSettingsUpdateInternalServerError) WithPayload(payload string) *UserSettingsUpdateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user settings update internal server error response
func (o *UserSettingsUpdateInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserSettingsUpdateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
