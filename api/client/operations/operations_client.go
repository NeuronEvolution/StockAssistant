// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
UserIndexAdd users add new index
*/
func (a *Client) UserIndexAdd(params *UserIndexAddParams) (*UserIndexAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserIndexAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserIndexAdd",
		Method:             "PUT",
		PathPattern:        "/{userId}/indices",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserIndexAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserIndexAddOK), nil

}

/*
UserIndexDelete user index delete API
*/
func (a *Client) UserIndexDelete(params *UserIndexDeleteParams) (*UserIndexDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserIndexDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserIndexDelete",
		Method:             "DELETE",
		PathPattern:        "/{userId}/indices/{indexId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserIndexDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserIndexDeleteOK), nil

}

/*
UserIndexGet gets user index
*/
func (a *Client) UserIndexGet(params *UserIndexGetParams) (*UserIndexGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserIndexGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserIndexGet",
		Method:             "GET",
		PathPattern:        "/{userId}/indices/{indexId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserIndexGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserIndexGetOK), nil

}

/*
UserIndexList gets user indices
*/
func (a *Client) UserIndexList(params *UserIndexListParams) (*UserIndexListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserIndexListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserIndexList",
		Method:             "GET",
		PathPattern:        "/{userId}/indices",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserIndexListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserIndexListOK), nil

}

/*
UserIndexUpdate users modify index
*/
func (a *Client) UserIndexUpdate(params *UserIndexUpdateParams) (*UserIndexUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserIndexUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserIndexUpdate",
		Method:             "PATCH",
		PathPattern:        "/{userId}/indices/{indexId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserIndexUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserIndexUpdateOK), nil

}

/*
UserSettingsAdd adds
*/
func (a *Client) UserSettingsAdd(params *UserSettingsAddParams) (*UserSettingsAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserSettingsAddParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserSettingsAdd",
		Method:             "PUT",
		PathPattern:        "/{userId}/settings",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserSettingsAddReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserSettingsAddOK), nil

}

/*
UserSettingsDelete user settings delete API
*/
func (a *Client) UserSettingsDelete(params *UserSettingsDeleteParams) (*UserSettingsDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserSettingsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserSettingsDelete",
		Method:             "DELETE",
		PathPattern:        "/{userId}/settings/{configKey}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserSettingsDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserSettingsDeleteOK), nil

}

/*
UserSettingsGet user settings get API
*/
func (a *Client) UserSettingsGet(params *UserSettingsGetParams) (*UserSettingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserSettingsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserSettingsGet",
		Method:             "GET",
		PathPattern:        "/{userId}/settings/{configKey}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserSettingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserSettingsGetOK), nil

}

/*
UserSettingsList lists
*/
func (a *Client) UserSettingsList(params *UserSettingsListParams) (*UserSettingsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserSettingsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserSettingsList",
		Method:             "GET",
		PathPattern:        "/{userId}/settings",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserSettingsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserSettingsListOK), nil

}

/*
UserSettingsUpdate user settings update API
*/
func (a *Client) UserSettingsUpdate(params *UserSettingsUpdateParams) (*UserSettingsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserSettingsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserSettingsUpdate",
		Method:             "PATCH",
		PathPattern:        "/{userId}/settings/{configKey}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserSettingsUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserSettingsUpdateOK), nil

}

/*
UserStockEvaluateAddOrUpdate adds or update
*/
func (a *Client) UserStockEvaluateAddOrUpdate(params *UserStockEvaluateAddOrUpdateParams) (*UserStockEvaluateAddOrUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserStockEvaluateAddOrUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserStockEvaluateAddOrUpdate",
		Method:             "POST",
		PathPattern:        "/{userId}/stockEvaluates/{stockId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserStockEvaluateAddOrUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserStockEvaluateAddOrUpdateOK), nil

}

/*
UserStockEvaluateGet user stock evaluate get API
*/
func (a *Client) UserStockEvaluateGet(params *UserStockEvaluateGetParams) (*UserStockEvaluateGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserStockEvaluateGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserStockEvaluateGet",
		Method:             "GET",
		PathPattern:        "/{userId}/stockEvaluates/{stockId}",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserStockEvaluateGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserStockEvaluateGetOK), nil

}

/*
UserStockEvaluateList user stock evaluate list API
*/
func (a *Client) UserStockEvaluateList(params *UserStockEvaluateListParams) (*UserStockEvaluateListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUserStockEvaluateListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UserStockEvaluateList",
		Method:             "GET",
		PathPattern:        "/{userId}/stockEvaluates",
		ProducesMediaTypes: []string{"application/json;charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json;charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UserStockEvaluateListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UserStockEvaluateListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
