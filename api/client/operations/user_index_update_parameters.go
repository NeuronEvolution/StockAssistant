// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/NeuronEvolution/StockAssistant/api/models"
)

// NewUserIndexUpdateParams creates a new UserIndexUpdateParams object
// with the default values initialized.
func NewUserIndexUpdateParams() *UserIndexUpdateParams {
	var ()
	return &UserIndexUpdateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUserIndexUpdateParamsWithTimeout creates a new UserIndexUpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserIndexUpdateParamsWithTimeout(timeout time.Duration) *UserIndexUpdateParams {
	var ()
	return &UserIndexUpdateParams{

		timeout: timeout,
	}
}

// NewUserIndexUpdateParamsWithContext creates a new UserIndexUpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserIndexUpdateParamsWithContext(ctx context.Context) *UserIndexUpdateParams {
	var ()
	return &UserIndexUpdateParams{

		Context: ctx,
	}
}

// NewUserIndexUpdateParamsWithHTTPClient creates a new UserIndexUpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserIndexUpdateParamsWithHTTPClient(client *http.Client) *UserIndexUpdateParams {
	var ()
	return &UserIndexUpdateParams{
		HTTPClient: client,
	}
}

/*UserIndexUpdateParams contains all the parameters to send to the API endpoint
for the user index update operation typically these are written to a http.Request
*/
type UserIndexUpdateParams struct {

	/*Index
	  Index

	*/
	Index *models.StockIndex
	/*IndexID
	  index id

	*/
	IndexID string
	/*UserID
	  User id

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user index update params
func (o *UserIndexUpdateParams) WithTimeout(timeout time.Duration) *UserIndexUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user index update params
func (o *UserIndexUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user index update params
func (o *UserIndexUpdateParams) WithContext(ctx context.Context) *UserIndexUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user index update params
func (o *UserIndexUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user index update params
func (o *UserIndexUpdateParams) WithHTTPClient(client *http.Client) *UserIndexUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user index update params
func (o *UserIndexUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIndex adds the index to the user index update params
func (o *UserIndexUpdateParams) WithIndex(index *models.StockIndex) *UserIndexUpdateParams {
	o.SetIndex(index)
	return o
}

// SetIndex adds the index to the user index update params
func (o *UserIndexUpdateParams) SetIndex(index *models.StockIndex) {
	o.Index = index
}

// WithIndexID adds the indexID to the user index update params
func (o *UserIndexUpdateParams) WithIndexID(indexID string) *UserIndexUpdateParams {
	o.SetIndexID(indexID)
	return o
}

// SetIndexID adds the indexId to the user index update params
func (o *UserIndexUpdateParams) SetIndexID(indexID string) {
	o.IndexID = indexID
}

// WithUserID adds the userID to the user index update params
func (o *UserIndexUpdateParams) WithUserID(userID string) *UserIndexUpdateParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the user index update params
func (o *UserIndexUpdateParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *UserIndexUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Index == nil {
		o.Index = new(models.StockIndex)
	}

	if err := r.SetBodyParam(o.Index); err != nil {
		return err
	}

	// path param indexId
	if err := r.SetPathParam("indexId", o.IndexID); err != nil {
		return err
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
