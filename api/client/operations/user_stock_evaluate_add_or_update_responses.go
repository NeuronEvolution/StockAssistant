// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/NeuronEvolution/StockAssistant/api/models"
)

// UserStockEvaluateAddOrUpdateReader is a Reader for the UserStockEvaluateAddOrUpdate structure.
type UserStockEvaluateAddOrUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserStockEvaluateAddOrUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUserStockEvaluateAddOrUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUserStockEvaluateAddOrUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUserStockEvaluateAddOrUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUserStockEvaluateAddOrUpdateOK creates a UserStockEvaluateAddOrUpdateOK with default headers values
func NewUserStockEvaluateAddOrUpdateOK() *UserStockEvaluateAddOrUpdateOK {
	return &UserStockEvaluateAddOrUpdateOK{}
}

/*UserStockEvaluateAddOrUpdateOK handles this case with default header values.

ok
*/
type UserStockEvaluateAddOrUpdateOK struct {
	Payload *models.StockEvaluate
}

func (o *UserStockEvaluateAddOrUpdateOK) Error() string {
	return fmt.Sprintf("[POST /{userId}/stockEvaluates/{stockId}][%d] userStockEvaluateAddOrUpdateOK  %+v", 200, o.Payload)
}

func (o *UserStockEvaluateAddOrUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StockEvaluate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserStockEvaluateAddOrUpdateBadRequest creates a UserStockEvaluateAddOrUpdateBadRequest with default headers values
func NewUserStockEvaluateAddOrUpdateBadRequest() *UserStockEvaluateAddOrUpdateBadRequest {
	return &UserStockEvaluateAddOrUpdateBadRequest{}
}

/*UserStockEvaluateAddOrUpdateBadRequest handles this case with default header values.

Bad request
*/
type UserStockEvaluateAddOrUpdateBadRequest struct {
	Payload string
}

func (o *UserStockEvaluateAddOrUpdateBadRequest) Error() string {
	return fmt.Sprintf("[POST /{userId}/stockEvaluates/{stockId}][%d] userStockEvaluateAddOrUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *UserStockEvaluateAddOrUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserStockEvaluateAddOrUpdateInternalServerError creates a UserStockEvaluateAddOrUpdateInternalServerError with default headers values
func NewUserStockEvaluateAddOrUpdateInternalServerError() *UserStockEvaluateAddOrUpdateInternalServerError {
	return &UserStockEvaluateAddOrUpdateInternalServerError{}
}

/*UserStockEvaluateAddOrUpdateInternalServerError handles this case with default header values.

Internal error
*/
type UserStockEvaluateAddOrUpdateInternalServerError struct {
	Payload string
}

func (o *UserStockEvaluateAddOrUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /{userId}/stockEvaluates/{stockId}][%d] userStockEvaluateAddOrUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *UserStockEvaluateAddOrUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
