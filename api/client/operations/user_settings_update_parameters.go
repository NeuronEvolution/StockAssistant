// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/NeuronEvolution/StockAssistant/api/models"
)

// NewUserSettingsUpdateParams creates a new UserSettingsUpdateParams object
// with the default values initialized.
func NewUserSettingsUpdateParams() *UserSettingsUpdateParams {
	var ()
	return &UserSettingsUpdateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUserSettingsUpdateParamsWithTimeout creates a new UserSettingsUpdateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserSettingsUpdateParamsWithTimeout(timeout time.Duration) *UserSettingsUpdateParams {
	var ()
	return &UserSettingsUpdateParams{

		timeout: timeout,
	}
}

// NewUserSettingsUpdateParamsWithContext creates a new UserSettingsUpdateParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserSettingsUpdateParamsWithContext(ctx context.Context) *UserSettingsUpdateParams {
	var ()
	return &UserSettingsUpdateParams{

		Context: ctx,
	}
}

// NewUserSettingsUpdateParamsWithHTTPClient creates a new UserSettingsUpdateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserSettingsUpdateParamsWithHTTPClient(client *http.Client) *UserSettingsUpdateParams {
	var ()
	return &UserSettingsUpdateParams{
		HTTPClient: client,
	}
}

/*UserSettingsUpdateParams contains all the parameters to send to the API endpoint
for the user settings update operation typically these are written to a http.Request
*/
type UserSettingsUpdateParams struct {

	/*Setting
	  setting

	*/
	Setting *models.Setting
	/*ConfigKey
	  config key

	*/
	ConfigKey string
	/*UserID
	  User id

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user settings update params
func (o *UserSettingsUpdateParams) WithTimeout(timeout time.Duration) *UserSettingsUpdateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user settings update params
func (o *UserSettingsUpdateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user settings update params
func (o *UserSettingsUpdateParams) WithContext(ctx context.Context) *UserSettingsUpdateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user settings update params
func (o *UserSettingsUpdateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user settings update params
func (o *UserSettingsUpdateParams) WithHTTPClient(client *http.Client) *UserSettingsUpdateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user settings update params
func (o *UserSettingsUpdateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSetting adds the setting to the user settings update params
func (o *UserSettingsUpdateParams) WithSetting(setting *models.Setting) *UserSettingsUpdateParams {
	o.SetSetting(setting)
	return o
}

// SetSetting adds the setting to the user settings update params
func (o *UserSettingsUpdateParams) SetSetting(setting *models.Setting) {
	o.Setting = setting
}

// WithConfigKey adds the configKey to the user settings update params
func (o *UserSettingsUpdateParams) WithConfigKey(configKey string) *UserSettingsUpdateParams {
	o.SetConfigKey(configKey)
	return o
}

// SetConfigKey adds the configKey to the user settings update params
func (o *UserSettingsUpdateParams) SetConfigKey(configKey string) {
	o.ConfigKey = configKey
}

// WithUserID adds the userID to the user settings update params
func (o *UserSettingsUpdateParams) WithUserID(userID string) *UserSettingsUpdateParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the user settings update params
func (o *UserSettingsUpdateParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *UserSettingsUpdateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Setting == nil {
		o.Setting = new(models.Setting)
	}

	if err := r.SetBodyParam(o.Setting); err != nil {
		return err
	}

	// path param configKey
	if err := r.SetPathParam("configKey", o.ConfigKey); err != nil {
		return err
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
