// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/NeuronEvolution/StockAssistant/api/private/gen/models"
)

// UserStockEvaluateListOKCode is the HTTP code returned for type UserStockEvaluateListOK
const UserStockEvaluateListOKCode int = 200

/*UserStockEvaluateListOK ok

swagger:response userStockEvaluateListOK
*/
type UserStockEvaluateListOK struct {
	/*
	  Required: true
	*/
	NeuronXNextPageToken string `json:"Neuron-X-NextPageToken"`

	/*
	  In: Body
	*/
	Payload models.UserStockEvaluateListOKBody `json:"body,omitempty"`
}

// NewUserStockEvaluateListOK creates UserStockEvaluateListOK with default headers values
func NewUserStockEvaluateListOK() *UserStockEvaluateListOK {
	return &UserStockEvaluateListOK{}
}

// WithNeuronXNextPageToken adds the neuronXNextPageToken to the user stock evaluate list o k response
func (o *UserStockEvaluateListOK) WithNeuronXNextPageToken(neuronXNextPageToken string) *UserStockEvaluateListOK {
	o.NeuronXNextPageToken = neuronXNextPageToken
	return o
}

// SetNeuronXNextPageToken sets the neuronXNextPageToken to the user stock evaluate list o k response
func (o *UserStockEvaluateListOK) SetNeuronXNextPageToken(neuronXNextPageToken string) {
	o.NeuronXNextPageToken = neuronXNextPageToken
}

// WithPayload adds the payload to the user stock evaluate list o k response
func (o *UserStockEvaluateListOK) WithPayload(payload models.UserStockEvaluateListOKBody) *UserStockEvaluateListOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user stock evaluate list o k response
func (o *UserStockEvaluateListOK) SetPayload(payload models.UserStockEvaluateListOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserStockEvaluateListOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Neuron-X-NextPageToken

	neuronXNextPageToken := o.NeuronXNextPageToken
	if neuronXNextPageToken != "" {
		rw.Header().Set("Neuron-X-NextPageToken", neuronXNextPageToken)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.UserStockEvaluateListOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*UserStockEvaluateListDefault Error response

swagger:response userStockEvaluateListDefault
*/
type UserStockEvaluateListDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.UserStockEvaluateListDefaultBody `json:"body,omitempty"`
}

// NewUserStockEvaluateListDefault creates UserStockEvaluateListDefault with default headers values
func NewUserStockEvaluateListDefault(code int) *UserStockEvaluateListDefault {
	if code <= 0 {
		code = 500
	}

	return &UserStockEvaluateListDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the user stock evaluate list default response
func (o *UserStockEvaluateListDefault) WithStatusCode(code int) *UserStockEvaluateListDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the user stock evaluate list default response
func (o *UserStockEvaluateListDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the user stock evaluate list default response
func (o *UserStockEvaluateListDefault) WithPayload(payload *models.UserStockEvaluateListDefaultBody) *UserStockEvaluateListDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user stock evaluate list default response
func (o *UserStockEvaluateListDefault) SetPayload(payload *models.UserStockEvaluateListDefaultBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserStockEvaluateListDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
