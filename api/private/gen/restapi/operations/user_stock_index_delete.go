// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	"go.uber.org/zap"
)

// UserStockIndexDeleteHandlerFunc turns a function with the right signature into a user stock index delete handler
type UserStockIndexDeleteHandlerFunc func(UserStockIndexDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserStockIndexDeleteHandlerFunc) Handle(params UserStockIndexDeleteParams) middleware.Responder {
	return fn(params)
}

// UserStockIndexDeleteHandler interface for that can handle valid user stock index delete params
type UserStockIndexDeleteHandler interface {
	Handle(UserStockIndexDeleteParams) middleware.Responder
}

// NewUserStockIndexDelete creates a new http.Handler for the user stock index delete operation
func NewUserStockIndexDelete(ctx *middleware.Context, handler UserStockIndexDeleteHandler) *UserStockIndexDelete {
	return &UserStockIndexDelete{Context: ctx, Handler: handler}
}

/*UserStockIndexDelete swagger:route DELETE /{userId}/stockIndices/{indexName} userStockIndexDelete

UserStockIndexDelete user stock index delete API

*/
type UserStockIndexDelete struct {
	Context *middleware.Context
	Handler UserStockIndexDeleteHandler
}

func (o *UserStockIndexDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserStockIndexDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	zap.L().Named("api").Info("UserStockIndexDelete", zap.Any("request", &Params))

	res := o.Handler.Handle(Params) // actually handle the request

	zap.L().Named("api").Info("UserStockIndexDelete", zap.Any("response", res))

	o.Context.Respond(rw, r, route.Produces, route, res)

}
