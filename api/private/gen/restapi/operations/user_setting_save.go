// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UserSettingSaveHandlerFunc turns a function with the right signature into a user setting save handler
type UserSettingSaveHandlerFunc func(UserSettingSaveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserSettingSaveHandlerFunc) Handle(params UserSettingSaveParams) middleware.Responder {
	return fn(params)
}

// UserSettingSaveHandler interface for that can handle valid user setting save params
type UserSettingSaveHandler interface {
	Handle(UserSettingSaveParams) middleware.Responder
}

// NewUserSettingSave creates a new http.Handler for the user setting save operation
func NewUserSettingSave(ctx *middleware.Context, handler UserSettingSaveHandler) *UserSettingSave {
	return &UserSettingSave{Context: ctx, Handler: handler}
}

/*UserSettingSave swagger:route POST /{userId}/settings userSettingSave

save

*/
type UserSettingSave struct {
	Context *middleware.Context
	Handler UserSettingSaveHandler
}

func (o *UserSettingSave) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserSettingSaveParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
