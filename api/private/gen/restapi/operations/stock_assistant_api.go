// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewStockAssistantAPI creates a new StockAssistant instance
func NewStockAssistantAPI(spec *loads.Document) *StockAssistantAPI {
	return &StockAssistantAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		StockIndexAdviceListHandler: StockIndexAdviceListHandlerFunc(func(params StockIndexAdviceListParams) middleware.Responder {
			return middleware.NotImplemented("operation StockIndexAdviceList has not yet been implemented")
		}),
		UserIndexEvaluateGetHandler: UserIndexEvaluateGetHandlerFunc(func(params UserIndexEvaluateGetParams) middleware.Responder {
			return middleware.NotImplemented("operation UserIndexEvaluateGet has not yet been implemented")
		}),
		UserIndexEvaluateListHandler: UserIndexEvaluateListHandlerFunc(func(params UserIndexEvaluateListParams) middleware.Responder {
			return middleware.NotImplemented("operation UserIndexEvaluateList has not yet been implemented")
		}),
		UserIndexEvaluateSaveHandler: UserIndexEvaluateSaveHandlerFunc(func(params UserIndexEvaluateSaveParams) middleware.Responder {
			return middleware.NotImplemented("operation UserIndexEvaluateSave has not yet been implemented")
		}),
		UserSettingDeleteHandler: UserSettingDeleteHandlerFunc(func(params UserSettingDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation UserSettingDelete has not yet been implemented")
		}),
		UserSettingGetHandler: UserSettingGetHandlerFunc(func(params UserSettingGetParams) middleware.Responder {
			return middleware.NotImplemented("operation UserSettingGet has not yet been implemented")
		}),
		UserSettingListHandler: UserSettingListHandlerFunc(func(params UserSettingListParams) middleware.Responder {
			return middleware.NotImplemented("operation UserSettingList has not yet been implemented")
		}),
		UserSettingSaveHandler: UserSettingSaveHandlerFunc(func(params UserSettingSaveParams) middleware.Responder {
			return middleware.NotImplemented("operation UserSettingSave has not yet been implemented")
		}),
		UserStockEvaluateGetHandler: UserStockEvaluateGetHandlerFunc(func(params UserStockEvaluateGetParams) middleware.Responder {
			return middleware.NotImplemented("operation UserStockEvaluateGet has not yet been implemented")
		}),
		UserStockEvaluateListHandler: UserStockEvaluateListHandlerFunc(func(params UserStockEvaluateListParams) middleware.Responder {
			return middleware.NotImplemented("operation UserStockEvaluateList has not yet been implemented")
		}),
		UserStockIndexAddHandler: UserStockIndexAddHandlerFunc(func(params UserStockIndexAddParams) middleware.Responder {
			return middleware.NotImplemented("operation UserStockIndexAdd has not yet been implemented")
		}),
		UserStockIndexDeleteHandler: UserStockIndexDeleteHandlerFunc(func(params UserStockIndexDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation UserStockIndexDelete has not yet been implemented")
		}),
		UserStockIndexGetHandler: UserStockIndexGetHandlerFunc(func(params UserStockIndexGetParams) middleware.Responder {
			return middleware.NotImplemented("operation UserStockIndexGet has not yet been implemented")
		}),
		UserStockIndexListHandler: UserStockIndexListHandlerFunc(func(params UserStockIndexListParams) middleware.Responder {
			return middleware.NotImplemented("operation UserStockIndexList has not yet been implemented")
		}),
		UserStockIndexRenameHandler: UserStockIndexRenameHandlerFunc(func(params UserStockIndexRenameParams) middleware.Responder {
			return middleware.NotImplemented("operation UserStockIndexRename has not yet been implemented")
		}),
		UserStockIndexUpdateHandler: UserStockIndexUpdateHandlerFunc(func(params UserStockIndexUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation UserStockIndexUpdate has not yet been implemented")
		}),
	}
}

/*StockAssistantAPI the stock assistant API */
type StockAssistantAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// StockIndexAdviceListHandler sets the operation handler for the stock index advice list operation
	StockIndexAdviceListHandler StockIndexAdviceListHandler
	// UserIndexEvaluateGetHandler sets the operation handler for the user index evaluate get operation
	UserIndexEvaluateGetHandler UserIndexEvaluateGetHandler
	// UserIndexEvaluateListHandler sets the operation handler for the user index evaluate list operation
	UserIndexEvaluateListHandler UserIndexEvaluateListHandler
	// UserIndexEvaluateSaveHandler sets the operation handler for the user index evaluate save operation
	UserIndexEvaluateSaveHandler UserIndexEvaluateSaveHandler
	// UserSettingDeleteHandler sets the operation handler for the user setting delete operation
	UserSettingDeleteHandler UserSettingDeleteHandler
	// UserSettingGetHandler sets the operation handler for the user setting get operation
	UserSettingGetHandler UserSettingGetHandler
	// UserSettingListHandler sets the operation handler for the user setting list operation
	UserSettingListHandler UserSettingListHandler
	// UserSettingSaveHandler sets the operation handler for the user setting save operation
	UserSettingSaveHandler UserSettingSaveHandler
	// UserStockEvaluateGetHandler sets the operation handler for the user stock evaluate get operation
	UserStockEvaluateGetHandler UserStockEvaluateGetHandler
	// UserStockEvaluateListHandler sets the operation handler for the user stock evaluate list operation
	UserStockEvaluateListHandler UserStockEvaluateListHandler
	// UserStockIndexAddHandler sets the operation handler for the user stock index add operation
	UserStockIndexAddHandler UserStockIndexAddHandler
	// UserStockIndexDeleteHandler sets the operation handler for the user stock index delete operation
	UserStockIndexDeleteHandler UserStockIndexDeleteHandler
	// UserStockIndexGetHandler sets the operation handler for the user stock index get operation
	UserStockIndexGetHandler UserStockIndexGetHandler
	// UserStockIndexListHandler sets the operation handler for the user stock index list operation
	UserStockIndexListHandler UserStockIndexListHandler
	// UserStockIndexRenameHandler sets the operation handler for the user stock index rename operation
	UserStockIndexRenameHandler UserStockIndexRenameHandler
	// UserStockIndexUpdateHandler sets the operation handler for the user stock index update operation
	UserStockIndexUpdateHandler UserStockIndexUpdateHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *StockAssistantAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *StockAssistantAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *StockAssistantAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *StockAssistantAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *StockAssistantAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *StockAssistantAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *StockAssistantAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the StockAssistantAPI
func (o *StockAssistantAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.StockIndexAdviceListHandler == nil {
		unregistered = append(unregistered, "StockIndexAdviceListHandler")
	}

	if o.UserIndexEvaluateGetHandler == nil {
		unregistered = append(unregistered, "UserIndexEvaluateGetHandler")
	}

	if o.UserIndexEvaluateListHandler == nil {
		unregistered = append(unregistered, "UserIndexEvaluateListHandler")
	}

	if o.UserIndexEvaluateSaveHandler == nil {
		unregistered = append(unregistered, "UserIndexEvaluateSaveHandler")
	}

	if o.UserSettingDeleteHandler == nil {
		unregistered = append(unregistered, "UserSettingDeleteHandler")
	}

	if o.UserSettingGetHandler == nil {
		unregistered = append(unregistered, "UserSettingGetHandler")
	}

	if o.UserSettingListHandler == nil {
		unregistered = append(unregistered, "UserSettingListHandler")
	}

	if o.UserSettingSaveHandler == nil {
		unregistered = append(unregistered, "UserSettingSaveHandler")
	}

	if o.UserStockEvaluateGetHandler == nil {
		unregistered = append(unregistered, "UserStockEvaluateGetHandler")
	}

	if o.UserStockEvaluateListHandler == nil {
		unregistered = append(unregistered, "UserStockEvaluateListHandler")
	}

	if o.UserStockIndexAddHandler == nil {
		unregistered = append(unregistered, "UserStockIndexAddHandler")
	}

	if o.UserStockIndexDeleteHandler == nil {
		unregistered = append(unregistered, "UserStockIndexDeleteHandler")
	}

	if o.UserStockIndexGetHandler == nil {
		unregistered = append(unregistered, "UserStockIndexGetHandler")
	}

	if o.UserStockIndexListHandler == nil {
		unregistered = append(unregistered, "UserStockIndexListHandler")
	}

	if o.UserStockIndexRenameHandler == nil {
		unregistered = append(unregistered, "UserStockIndexRenameHandler")
	}

	if o.UserStockIndexUpdateHandler == nil {
		unregistered = append(unregistered, "UserStockIndexUpdateHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *StockAssistantAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *StockAssistantAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *StockAssistantAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *StockAssistantAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *StockAssistantAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *StockAssistantAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the stock assistant API
func (o *StockAssistantAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *StockAssistantAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/stockIndexAdvices"] = NewStockIndexAdviceList(o.context, o.StockIndexAdviceListHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{userId}/stockEvaluates/{stockId}/indexEvaluates/{indexName}"] = NewUserIndexEvaluateGet(o.context, o.UserIndexEvaluateGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{userId}/stockEvaluates/{stockId}/indexEvaluates"] = NewUserIndexEvaluateList(o.context, o.UserIndexEvaluateListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/{userId}/stockEvaluates/{stockId}/indexEvaluates"] = NewUserIndexEvaluateSave(o.context, o.UserIndexEvaluateSaveHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/{userId}/settings/{configKey}"] = NewUserSettingDelete(o.context, o.UserSettingDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{userId}/settings/{configKey}"] = NewUserSettingGet(o.context, o.UserSettingGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{userId}/settings"] = NewUserSettingList(o.context, o.UserSettingListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/{userId}/settings"] = NewUserSettingSave(o.context, o.UserSettingSaveHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{userId}/stockEvaluates/{stockId}"] = NewUserStockEvaluateGet(o.context, o.UserStockEvaluateGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{userId}/stockEvaluates"] = NewUserStockEvaluateList(o.context, o.UserStockEvaluateListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/{userId}/stockIndices"] = NewUserStockIndexAdd(o.context, o.UserStockIndexAddHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/{userId}/stockIndices/{indexName}"] = NewUserStockIndexDelete(o.context, o.UserStockIndexDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{userId}/stockIndices/{indexName}"] = NewUserStockIndexGet(o.context, o.UserStockIndexGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{userId}/stockIndices"] = NewUserStockIndexList(o.context, o.UserStockIndexListHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/{userId}/stockIndices/rename"] = NewUserStockIndexRename(o.context, o.UserStockIndexRenameHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/{userId}/stockIndices/{indexName}"] = NewUserStockIndexUpdate(o.context, o.UserStockIndexUpdateHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *StockAssistantAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *StockAssistantAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
