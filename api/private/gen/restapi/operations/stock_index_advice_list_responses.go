// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/NeuronEvolution/StockAssistant/api/private/gen/models"
)

// StockIndexAdviceListOKCode is the HTTP code returned for type StockIndexAdviceListOK
const StockIndexAdviceListOKCode int = 200

/*StockIndexAdviceListOK ok

swagger:response stockIndexAdviceListOK
*/
type StockIndexAdviceListOK struct {
	/*
	  Required: true
	*/
	NeuronXNextPageToken string `json:"Neuron-X-NextPageToken"`

	/*
	  In: Body
	*/
	Payload models.StockIndexAdviceListOKBody `json:"body,omitempty"`
}

// NewStockIndexAdviceListOK creates StockIndexAdviceListOK with default headers values
func NewStockIndexAdviceListOK() *StockIndexAdviceListOK {
	return &StockIndexAdviceListOK{}
}

// WithNeuronXNextPageToken adds the neuronXNextPageToken to the stock index advice list o k response
func (o *StockIndexAdviceListOK) WithNeuronXNextPageToken(neuronXNextPageToken string) *StockIndexAdviceListOK {
	o.NeuronXNextPageToken = neuronXNextPageToken
	return o
}

// SetNeuronXNextPageToken sets the neuronXNextPageToken to the stock index advice list o k response
func (o *StockIndexAdviceListOK) SetNeuronXNextPageToken(neuronXNextPageToken string) {
	o.NeuronXNextPageToken = neuronXNextPageToken
}

// WithPayload adds the payload to the stock index advice list o k response
func (o *StockIndexAdviceListOK) WithPayload(payload models.StockIndexAdviceListOKBody) *StockIndexAdviceListOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the stock index advice list o k response
func (o *StockIndexAdviceListOK) SetPayload(payload models.StockIndexAdviceListOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StockIndexAdviceListOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Neuron-X-NextPageToken

	neuronXNextPageToken := o.NeuronXNextPageToken
	if neuronXNextPageToken != "" {
		rw.Header().Set("Neuron-X-NextPageToken", neuronXNextPageToken)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.StockIndexAdviceListOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
