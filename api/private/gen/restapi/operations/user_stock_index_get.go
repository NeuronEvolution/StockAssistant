// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	"go.uber.org/zap"
)

// UserStockIndexGetHandlerFunc turns a function with the right signature into a user stock index get handler
type UserStockIndexGetHandlerFunc func(UserStockIndexGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserStockIndexGetHandlerFunc) Handle(params UserStockIndexGetParams) middleware.Responder {
	return fn(params)
}

// UserStockIndexGetHandler interface for that can handle valid user stock index get params
type UserStockIndexGetHandler interface {
	Handle(UserStockIndexGetParams) middleware.Responder
}

// NewUserStockIndexGet creates a new http.Handler for the user stock index get operation
func NewUserStockIndexGet(ctx *middleware.Context, handler UserStockIndexGetHandler) *UserStockIndexGet {
	return &UserStockIndexGet{Context: ctx, Handler: handler}
}

/*UserStockIndexGet swagger:route GET /{userId}/stockIndices/{indexName} userStockIndexGet

Get user index

*/
type UserStockIndexGet struct {
	Context *middleware.Context
	Handler UserStockIndexGetHandler
}

func (o *UserStockIndexGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserStockIndexGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	zap.L().Named("api").Info("UserStockIndexGet", zap.Any("request", &Params))

	res := o.Handler.Handle(Params) // actually handle the request

	zap.L().Named("api").Info("UserStockIndexGet", zap.Any("response", res))

	o.Context.Respond(rw, r, route.Produces, route, res)

}
