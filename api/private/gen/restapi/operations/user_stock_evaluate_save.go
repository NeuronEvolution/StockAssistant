// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UserStockEvaluateSaveHandlerFunc turns a function with the right signature into a user stock evaluate save handler
type UserStockEvaluateSaveHandlerFunc func(UserStockEvaluateSaveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserStockEvaluateSaveHandlerFunc) Handle(params UserStockEvaluateSaveParams) middleware.Responder {
	return fn(params)
}

// UserStockEvaluateSaveHandler interface for that can handle valid user stock evaluate save params
type UserStockEvaluateSaveHandler interface {
	Handle(UserStockEvaluateSaveParams) middleware.Responder
}

// NewUserStockEvaluateSave creates a new http.Handler for the user stock evaluate save operation
func NewUserStockEvaluateSave(ctx *middleware.Context, handler UserStockEvaluateSaveHandler) *UserStockEvaluateSave {
	return &UserStockEvaluateSave{Context: ctx, Handler: handler}
}

/*UserStockEvaluateSave swagger:route POST /{userId}/stockEvaluates userStockEvaluateSave

save

*/
type UserStockEvaluateSave struct {
	Context *middleware.Context
	Handler UserStockEvaluateSaveHandler
}

func (o *UserStockEvaluateSave) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserStockEvaluateSaveParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
