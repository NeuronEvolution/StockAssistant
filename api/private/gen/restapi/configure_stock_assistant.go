// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	graceful "github.com/tylerb/graceful"

	"github.com/NeuronEvolution/StockAssistant/api/private/gen/restapi/operations"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target ../gen --name  --spec ../swagger.json

func configureFlags(api *operations.StockAssistantAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.StockAssistantAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.UserIndexDeleteHandler = operations.UserIndexDeleteHandlerFunc(func(params operations.UserIndexDeleteParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserIndexDelete has not yet been implemented")
	})
	api.UserIndexEvaluateGetHandler = operations.UserIndexEvaluateGetHandlerFunc(func(params operations.UserIndexEvaluateGetParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserIndexEvaluateGet has not yet been implemented")
	})
	api.UserIndexEvaluateListHandler = operations.UserIndexEvaluateListHandlerFunc(func(params operations.UserIndexEvaluateListParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserIndexEvaluateList has not yet been implemented")
	})
	api.UserIndexEvaluateSaveHandler = operations.UserIndexEvaluateSaveHandlerFunc(func(params operations.UserIndexEvaluateSaveParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserIndexEvaluateSave has not yet been implemented")
	})
	api.UserIndexGetHandler = operations.UserIndexGetHandlerFunc(func(params operations.UserIndexGetParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserIndexGet has not yet been implemented")
	})
	api.UserIndexListHandler = operations.UserIndexListHandlerFunc(func(params operations.UserIndexListParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserIndexList has not yet been implemented")
	})
	api.UserIndexRenameHandler = operations.UserIndexRenameHandlerFunc(func(params operations.UserIndexRenameParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserIndexRename has not yet been implemented")
	})
	api.UserIndexSaveHandler = operations.UserIndexSaveHandlerFunc(func(params operations.UserIndexSaveParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserIndexSave has not yet been implemented")
	})
	api.UserSettingDeleteHandler = operations.UserSettingDeleteHandlerFunc(func(params operations.UserSettingDeleteParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserSettingDelete has not yet been implemented")
	})
	api.UserSettingGetHandler = operations.UserSettingGetHandlerFunc(func(params operations.UserSettingGetParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserSettingGet has not yet been implemented")
	})
	api.UserSettingListHandler = operations.UserSettingListHandlerFunc(func(params operations.UserSettingListParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserSettingList has not yet been implemented")
	})
	api.UserSettingSaveHandler = operations.UserSettingSaveHandlerFunc(func(params operations.UserSettingSaveParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserSettingSave has not yet been implemented")
	})
	api.UserStockEvaluateGetHandler = operations.UserStockEvaluateGetHandlerFunc(func(params operations.UserStockEvaluateGetParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserStockEvaluateGet has not yet been implemented")
	})
	api.UserStockEvaluateListHandler = operations.UserStockEvaluateListHandlerFunc(func(params operations.UserStockEvaluateListParams) middleware.Responder {
		return middleware.NotImplemented("operation .UserStockEvaluateList has not yet been implemented")
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}
