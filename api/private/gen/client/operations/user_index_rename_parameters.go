// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUserIndexRenameParams creates a new UserIndexRenameParams object
// with the default values initialized.
func NewUserIndexRenameParams() *UserIndexRenameParams {
	var ()
	return &UserIndexRenameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUserIndexRenameParamsWithTimeout creates a new UserIndexRenameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserIndexRenameParamsWithTimeout(timeout time.Duration) *UserIndexRenameParams {
	var ()
	return &UserIndexRenameParams{

		timeout: timeout,
	}
}

// NewUserIndexRenameParamsWithContext creates a new UserIndexRenameParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserIndexRenameParamsWithContext(ctx context.Context) *UserIndexRenameParams {
	var ()
	return &UserIndexRenameParams{

		Context: ctx,
	}
}

// NewUserIndexRenameParamsWithHTTPClient creates a new UserIndexRenameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserIndexRenameParamsWithHTTPClient(client *http.Client) *UserIndexRenameParams {
	var ()
	return &UserIndexRenameParams{
		HTTPClient: client,
	}
}

/*UserIndexRenameParams contains all the parameters to send to the API endpoint
for the user index rename operation typically these are written to a http.Request
*/
type UserIndexRenameParams struct {

	/*NewName
	  new name

	*/
	NewName string
	/*OldName
	  old name

	*/
	OldName string
	/*UserID
	  User id

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user index rename params
func (o *UserIndexRenameParams) WithTimeout(timeout time.Duration) *UserIndexRenameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user index rename params
func (o *UserIndexRenameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user index rename params
func (o *UserIndexRenameParams) WithContext(ctx context.Context) *UserIndexRenameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user index rename params
func (o *UserIndexRenameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user index rename params
func (o *UserIndexRenameParams) WithHTTPClient(client *http.Client) *UserIndexRenameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user index rename params
func (o *UserIndexRenameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNewName adds the newName to the user index rename params
func (o *UserIndexRenameParams) WithNewName(newName string) *UserIndexRenameParams {
	o.SetNewName(newName)
	return o
}

// SetNewName adds the newName to the user index rename params
func (o *UserIndexRenameParams) SetNewName(newName string) {
	o.NewName = newName
}

// WithOldName adds the oldName to the user index rename params
func (o *UserIndexRenameParams) WithOldName(oldName string) *UserIndexRenameParams {
	o.SetOldName(oldName)
	return o
}

// SetOldName adds the oldName to the user index rename params
func (o *UserIndexRenameParams) SetOldName(oldName string) {
	o.OldName = oldName
}

// WithUserID adds the userID to the user index rename params
func (o *UserIndexRenameParams) WithUserID(userID string) *UserIndexRenameParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the user index rename params
func (o *UserIndexRenameParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *UserIndexRenameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param newName
	qrNewName := o.NewName
	qNewName := qrNewName
	if qNewName != "" {
		if err := r.SetQueryParam("newName", qNewName); err != nil {
			return err
		}
	}

	// query param oldName
	qrOldName := o.OldName
	qOldName := qrOldName
	if qOldName != "" {
		if err := r.SetQueryParam("oldName", qOldName); err != nil {
			return err
		}
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
