// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStockIndexAdviceListParams creates a new StockIndexAdviceListParams object
// with the default values initialized.
func NewStockIndexAdviceListParams() *StockIndexAdviceListParams {
	var ()
	return &StockIndexAdviceListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStockIndexAdviceListParamsWithTimeout creates a new StockIndexAdviceListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStockIndexAdviceListParamsWithTimeout(timeout time.Duration) *StockIndexAdviceListParams {
	var ()
	return &StockIndexAdviceListParams{

		timeout: timeout,
	}
}

// NewStockIndexAdviceListParamsWithContext creates a new StockIndexAdviceListParams object
// with the default values initialized, and the ability to set a context for a request
func NewStockIndexAdviceListParamsWithContext(ctx context.Context) *StockIndexAdviceListParams {
	var ()
	return &StockIndexAdviceListParams{

		Context: ctx,
	}
}

// NewStockIndexAdviceListParamsWithHTTPClient creates a new StockIndexAdviceListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStockIndexAdviceListParamsWithHTTPClient(client *http.Client) *StockIndexAdviceListParams {
	var ()
	return &StockIndexAdviceListParams{
		HTTPClient: client,
	}
}

/*StockIndexAdviceListParams contains all the parameters to send to the API endpoint
for the stock index advice list operation typically these are written to a http.Request
*/
type StockIndexAdviceListParams struct {

	/*PageSize*/
	PageSize *int32
	/*PageToken*/
	PageToken *string
	/*UserID*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stock index advice list params
func (o *StockIndexAdviceListParams) WithTimeout(timeout time.Duration) *StockIndexAdviceListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stock index advice list params
func (o *StockIndexAdviceListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stock index advice list params
func (o *StockIndexAdviceListParams) WithContext(ctx context.Context) *StockIndexAdviceListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stock index advice list params
func (o *StockIndexAdviceListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stock index advice list params
func (o *StockIndexAdviceListParams) WithHTTPClient(client *http.Client) *StockIndexAdviceListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stock index advice list params
func (o *StockIndexAdviceListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPageSize adds the pageSize to the stock index advice list params
func (o *StockIndexAdviceListParams) WithPageSize(pageSize *int32) *StockIndexAdviceListParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the stock index advice list params
func (o *StockIndexAdviceListParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the stock index advice list params
func (o *StockIndexAdviceListParams) WithPageToken(pageToken *string) *StockIndexAdviceListParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the stock index advice list params
func (o *StockIndexAdviceListParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithUserID adds the userID to the stock index advice list params
func (o *StockIndexAdviceListParams) WithUserID(userID *string) *StockIndexAdviceListParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the stock index advice list params
func (o *StockIndexAdviceListParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *StockIndexAdviceListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.PageToken != nil {

		// query param pageToken
		var qrPageToken string
		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {
			if err := r.SetQueryParam("pageToken", qPageToken); err != nil {
				return err
			}
		}

	}

	if o.UserID != nil {

		// query param userId
		var qrUserID string
		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {
			if err := r.SetQueryParam("userId", qUserID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
