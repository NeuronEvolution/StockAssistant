// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUserStockEvaluateListParams creates a new UserStockEvaluateListParams object
// with the default values initialized.
func NewUserStockEvaluateListParams() *UserStockEvaluateListParams {
	var ()
	return &UserStockEvaluateListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUserStockEvaluateListParamsWithTimeout creates a new UserStockEvaluateListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUserStockEvaluateListParamsWithTimeout(timeout time.Duration) *UserStockEvaluateListParams {
	var ()
	return &UserStockEvaluateListParams{

		timeout: timeout,
	}
}

// NewUserStockEvaluateListParamsWithContext creates a new UserStockEvaluateListParams object
// with the default values initialized, and the ability to set a context for a request
func NewUserStockEvaluateListParamsWithContext(ctx context.Context) *UserStockEvaluateListParams {
	var ()
	return &UserStockEvaluateListParams{

		Context: ctx,
	}
}

// NewUserStockEvaluateListParamsWithHTTPClient creates a new UserStockEvaluateListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUserStockEvaluateListParamsWithHTTPClient(client *http.Client) *UserStockEvaluateListParams {
	var ()
	return &UserStockEvaluateListParams{
		HTTPClient: client,
	}
}

/*UserStockEvaluateListParams contains all the parameters to send to the API endpoint
for the user stock evaluate list operation typically these are written to a http.Request
*/
type UserStockEvaluateListParams struct {

	/*NotEvaluated
	  not evaluated

	*/
	NotEvaluated *string
	/*PageSize
	  page size

	*/
	PageSize *int32
	/*PageToken
	  page token

	*/
	PageToken *string
	/*Sort
	  sort

	*/
	Sort *string
	/*UserID
	  User id

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the user stock evaluate list params
func (o *UserStockEvaluateListParams) WithTimeout(timeout time.Duration) *UserStockEvaluateListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the user stock evaluate list params
func (o *UserStockEvaluateListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the user stock evaluate list params
func (o *UserStockEvaluateListParams) WithContext(ctx context.Context) *UserStockEvaluateListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the user stock evaluate list params
func (o *UserStockEvaluateListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the user stock evaluate list params
func (o *UserStockEvaluateListParams) WithHTTPClient(client *http.Client) *UserStockEvaluateListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the user stock evaluate list params
func (o *UserStockEvaluateListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNotEvaluated adds the notEvaluated to the user stock evaluate list params
func (o *UserStockEvaluateListParams) WithNotEvaluated(notEvaluated *string) *UserStockEvaluateListParams {
	o.SetNotEvaluated(notEvaluated)
	return o
}

// SetNotEvaluated adds the notEvaluated to the user stock evaluate list params
func (o *UserStockEvaluateListParams) SetNotEvaluated(notEvaluated *string) {
	o.NotEvaluated = notEvaluated
}

// WithPageSize adds the pageSize to the user stock evaluate list params
func (o *UserStockEvaluateListParams) WithPageSize(pageSize *int32) *UserStockEvaluateListParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the user stock evaluate list params
func (o *UserStockEvaluateListParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the user stock evaluate list params
func (o *UserStockEvaluateListParams) WithPageToken(pageToken *string) *UserStockEvaluateListParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the user stock evaluate list params
func (o *UserStockEvaluateListParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithSort adds the sort to the user stock evaluate list params
func (o *UserStockEvaluateListParams) WithSort(sort *string) *UserStockEvaluateListParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the user stock evaluate list params
func (o *UserStockEvaluateListParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithUserID adds the userID to the user stock evaluate list params
func (o *UserStockEvaluateListParams) WithUserID(userID string) *UserStockEvaluateListParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the user stock evaluate list params
func (o *UserStockEvaluateListParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *UserStockEvaluateListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NotEvaluated != nil {

		// query param notEvaluated
		var qrNotEvaluated string
		if o.NotEvaluated != nil {
			qrNotEvaluated = *o.NotEvaluated
		}
		qNotEvaluated := qrNotEvaluated
		if qNotEvaluated != "" {
			if err := r.SetQueryParam("notEvaluated", qNotEvaluated); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.PageToken != nil {

		// query param pageToken
		var qrPageToken string
		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {
			if err := r.SetQueryParam("pageToken", qPageToken); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
