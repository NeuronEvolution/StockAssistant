// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/NeuronEvolution/StockAssistant/api/gen/models"
)

// UserStockEvaluateSaveOKCode is the HTTP code returned for type UserStockEvaluateSaveOK
const UserStockEvaluateSaveOKCode int = 200

/*UserStockEvaluateSaveOK ok

swagger:response userStockEvaluateSaveOK
*/
type UserStockEvaluateSaveOK struct {

	/*
	  In: Body
	*/
	Payload *models.StockEvaluate `json:"body,omitempty"`
}

// NewUserStockEvaluateSaveOK creates UserStockEvaluateSaveOK with default headers values
func NewUserStockEvaluateSaveOK() *UserStockEvaluateSaveOK {
	return &UserStockEvaluateSaveOK{}
}

// WithPayload adds the payload to the user stock evaluate save o k response
func (o *UserStockEvaluateSaveOK) WithPayload(payload *models.StockEvaluate) *UserStockEvaluateSaveOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user stock evaluate save o k response
func (o *UserStockEvaluateSaveOK) SetPayload(payload *models.StockEvaluate) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserStockEvaluateSaveOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserStockEvaluateSaveBadRequestCode is the HTTP code returned for type UserStockEvaluateSaveBadRequest
const UserStockEvaluateSaveBadRequestCode int = 400

/*UserStockEvaluateSaveBadRequest Bad request

swagger:response userStockEvaluateSaveBadRequest
*/
type UserStockEvaluateSaveBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUserStockEvaluateSaveBadRequest creates UserStockEvaluateSaveBadRequest with default headers values
func NewUserStockEvaluateSaveBadRequest() *UserStockEvaluateSaveBadRequest {
	return &UserStockEvaluateSaveBadRequest{}
}

// WithPayload adds the payload to the user stock evaluate save bad request response
func (o *UserStockEvaluateSaveBadRequest) WithPayload(payload string) *UserStockEvaluateSaveBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user stock evaluate save bad request response
func (o *UserStockEvaluateSaveBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserStockEvaluateSaveBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// UserStockEvaluateSaveInternalServerErrorCode is the HTTP code returned for type UserStockEvaluateSaveInternalServerError
const UserStockEvaluateSaveInternalServerErrorCode int = 500

/*UserStockEvaluateSaveInternalServerError Internal server error

swagger:response userStockEvaluateSaveInternalServerError
*/
type UserStockEvaluateSaveInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUserStockEvaluateSaveInternalServerError creates UserStockEvaluateSaveInternalServerError with default headers values
func NewUserStockEvaluateSaveInternalServerError() *UserStockEvaluateSaveInternalServerError {
	return &UserStockEvaluateSaveInternalServerError{}
}

// WithPayload adds the payload to the user stock evaluate save internal server error response
func (o *UserStockEvaluateSaveInternalServerError) WithPayload(payload string) *UserStockEvaluateSaveInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user stock evaluate save internal server error response
func (o *UserStockEvaluateSaveInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserStockEvaluateSaveInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
