// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/NeuronEvolution/StockAssistant/api/gen/models"
)

// UserIndexEvaluateGetOKCode is the HTTP code returned for type UserIndexEvaluateGetOK
const UserIndexEvaluateGetOKCode int = 200

/*UserIndexEvaluateGetOK ok

swagger:response userIndexEvaluateGetOK
*/
type UserIndexEvaluateGetOK struct {

	/*
	  In: Body
	*/
	Payload *models.IndexEvaluate `json:"body,omitempty"`
}

// NewUserIndexEvaluateGetOK creates UserIndexEvaluateGetOK with default headers values
func NewUserIndexEvaluateGetOK() *UserIndexEvaluateGetOK {
	return &UserIndexEvaluateGetOK{}
}

// WithPayload adds the payload to the user index evaluate get o k response
func (o *UserIndexEvaluateGetOK) WithPayload(payload *models.IndexEvaluate) *UserIndexEvaluateGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user index evaluate get o k response
func (o *UserIndexEvaluateGetOK) SetPayload(payload *models.IndexEvaluate) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserIndexEvaluateGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserIndexEvaluateGetBadRequestCode is the HTTP code returned for type UserIndexEvaluateGetBadRequest
const UserIndexEvaluateGetBadRequestCode int = 400

/*UserIndexEvaluateGetBadRequest Bad request

swagger:response userIndexEvaluateGetBadRequest
*/
type UserIndexEvaluateGetBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUserIndexEvaluateGetBadRequest creates UserIndexEvaluateGetBadRequest with default headers values
func NewUserIndexEvaluateGetBadRequest() *UserIndexEvaluateGetBadRequest {
	return &UserIndexEvaluateGetBadRequest{}
}

// WithPayload adds the payload to the user index evaluate get bad request response
func (o *UserIndexEvaluateGetBadRequest) WithPayload(payload string) *UserIndexEvaluateGetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user index evaluate get bad request response
func (o *UserIndexEvaluateGetBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserIndexEvaluateGetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// UserIndexEvaluateGetInternalServerErrorCode is the HTTP code returned for type UserIndexEvaluateGetInternalServerError
const UserIndexEvaluateGetInternalServerErrorCode int = 500

/*UserIndexEvaluateGetInternalServerError Internal server error

swagger:response userIndexEvaluateGetInternalServerError
*/
type UserIndexEvaluateGetInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUserIndexEvaluateGetInternalServerError creates UserIndexEvaluateGetInternalServerError with default headers values
func NewUserIndexEvaluateGetInternalServerError() *UserIndexEvaluateGetInternalServerError {
	return &UserIndexEvaluateGetInternalServerError{}
}

// WithPayload adds the payload to the user index evaluate get internal server error response
func (o *UserIndexEvaluateGetInternalServerError) WithPayload(payload string) *UserIndexEvaluateGetInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user index evaluate get internal server error response
func (o *UserIndexEvaluateGetInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserIndexEvaluateGetInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
