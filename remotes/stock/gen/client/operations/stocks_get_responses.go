// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/NeuronEvolution/StockAssistant/remotes/stock/gen/models"
)

// StocksGetReader is a Reader for the StocksGet structure.
type StocksGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StocksGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewStocksGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewStocksGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewStocksGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewStocksGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewStocksGetOK creates a StocksGetOK with default headers values
func NewStocksGetOK() *StocksGetOK {
	return &StocksGetOK{}
}

/*StocksGetOK handles this case with default header values.

Stock
*/
type StocksGetOK struct {
	Payload *models.Stock
}

func (o *StocksGetOK) Error() string {
	return fmt.Sprintf("[GET /stocks/{stockId}][%d] stocksGetOK  %+v", 200, o.Payload)
}

func (o *StocksGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Stock)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStocksGetBadRequest creates a StocksGetBadRequest with default headers values
func NewStocksGetBadRequest() *StocksGetBadRequest {
	return &StocksGetBadRequest{}
}

/*StocksGetBadRequest handles this case with default header values.

Bad request
*/
type StocksGetBadRequest struct {
	Payload string
}

func (o *StocksGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /stocks/{stockId}][%d] stocksGetBadRequest  %+v", 400, o.Payload)
}

func (o *StocksGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStocksGetNotFound creates a StocksGetNotFound with default headers values
func NewStocksGetNotFound() *StocksGetNotFound {
	return &StocksGetNotFound{}
}

/*StocksGetNotFound handles this case with default header values.

Not found
*/
type StocksGetNotFound struct {
	Payload string
}

func (o *StocksGetNotFound) Error() string {
	return fmt.Sprintf("[GET /stocks/{stockId}][%d] stocksGetNotFound  %+v", 404, o.Payload)
}

func (o *StocksGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStocksGetInternalServerError creates a StocksGetInternalServerError with default headers values
func NewStocksGetInternalServerError() *StocksGetInternalServerError {
	return &StocksGetInternalServerError{}
}

/*StocksGetInternalServerError handles this case with default header values.

Internal error
*/
type StocksGetInternalServerError struct {
	Payload string
}

func (o *StocksGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /stocks/{stockId}][%d] stocksGetInternalServerError  %+v", 500, o.Payload)
}

func (o *StocksGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
